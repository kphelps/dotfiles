#!/usr/bin/env python2

import atexit
import datetime
import json
import os
import re
import subprocess
import threading
import time


def read_file(path):
    if os.path.exists(path):
        with open(path) as f:
            return f.read().strip()
    return None


def get_color(name):
    output = read_file("/home/kphelps/.Xresources")
    match = re.search('%s: +(.+)' % name, output)
    color_hex = match.group(1)
    return '%%{F%s}' % color_hex


fg = get_color('foreground')
bg = get_color('background')
black = get_color('color8')
red = get_color('color9')
green = get_color('color10')
yellow = get_color('color11')
blue = get_color('color12')
magenta = get_color('color13')
cyan = get_color('color14')
white = get_color('color15')


def get_power():
    battery_path = '/sys/class/power_supply/BAT0/capacity'
    charger_path = '/sys/class/power_supply/ADP1/online'
    try:
        capacity = int(read_file(battery_path))
    except:
        capacity = None
    charging = read_file(charger_path)
    s = yellow
    if charging == "1":
        s += '\\uf1e6 '
    if capacity > 90:
        s += '\\uf240'
    elif capacity > 65:
        s += '\\uf241'
    elif capacity > 40:
        s += '\\uf242'
    elif capacity > 20:
        s += '\\uf243'
    else:
        s += '\\uf244'
    s += fg
    s += ' %d%%' % capacity
    return s


def get_workspace(monitor):
    output = subprocess.check_output(['i3-msg', '-t', 'get_workspaces'])
    data = json.loads(output)
    out = ''
    for e in data:
        if e.get('output') != monitor['monitor']:
            continue
        ws = e.get('name')
        if e.get('visible'):
            out += '%s[%s%s%s]' % (fg, red, ws, fg)
        else:
            out += ' %s ' % ws
    return out


def get_hostname():
    return green + read_file('/etc/hostname') + fg


def get_clock():
    now = datetime.datetime.now()
    return now.strftime("%s %%a %%b %%d  %s  %%X  %s" % (
        red, blue, fg
    ))


def get_cpu():
    output = subprocess.check_output(['mpstat', '-P', 'ALL', '1', '1'])
    cpus = []
    for line in output.splitlines():
        match = re.search('Average:\s+\d+\s+([0-9\.]+)', line)
        if match:
            cpus.append(str(int(float(match.group(1)))))
    return yellow + "CPU  " + "  ".join(cpus) + fg

def get_ram():
    output = subprocess.check_output(['free', '-h'])
    line = output.splitlines()[1].split()
    total = line[1]
    used = line[2]
    return magenta + "RAM  %s / %s" % (used, total) + fg


def get_network():
    ip = "No IP"
    try:
        output = subprocess.check_output(['ip', 'a', 's', 'wlp3s0'])
        lines = output.splitlines()
        for line in lines:
            parts = line.split()
            if parts[0] == 'inet':
                ip = parts[1].split('/')[0]
                break
    except:
        pass
    return cyan + '\uf108  ' + ip + fg


def get_wifi():
    output = subprocess.check_output(['iwconfig', 'wlp3s0'])
    matches = re.search('ESSID:"(.+)"', output)
    if matches is not None:
        ssid = matches.group(1)
    else:
        ssid = "Disconnected"
    s = "%{A:~/.config/panel/wifi_select.py:}"
    s += '\uf1eb  ' + ssid
    s += "%{A}"
    return s


def get_disk():
    output = subprocess.check_output(['df'])
    lines = output.splitlines()[1:]
    available = 0
    for line in lines:
        parts = line.split()
        if 'fedora' in parts[0]:
            available += int(parts[3])
    available_gb = available / 1024.0 / 1024.0
    return blue + '\uf1c0  %.1f GB' % (available_gb) + fg

def get_shutdown_menu():
    return "%{A:~/.config/panel/bar_pop:} \uf011 %{A}"


def get_volume():
    output = subprocess.check_output(['amixer', 'get', 'Master'])
    matches = re.search('Front Left: Playback \d+ \[(\d+)%\] \[(\w+)\]', output)
    if matches is None:
        return '?'
    volume = int(matches.group(1))
    onoff = matches.group(2)
    if onoff == 'off':
        icon = '\uf026'
    elif volume < 40:
        icon = '\uf027'
    else:
        icon = '\uf028'
    return '%s  %s' % (icon, volume)


def get_data(cpu, monitor):
    return "%%{l} %s %s    %s %%{c} %s        %s        %s %%{r} %s       %s      %s  %s   %s \n" % (
        get_workspace(monitor),
        get_hostname(),
        get_volume(),
        cpu,
        get_ram(),
        get_disk(),
        get_wifi(),
        get_network(),
        get_clock(),
        get_power(),
        get_shutdown_menu(),
    )


def update_cpu_data(lock, cpu_data):
    while True:
        data = get_cpu()
        with lock:
            cpu_data['data'] = data


def update_loop(ins, interval):
    cpu_data_lock = threading.Lock()
    cpu_data = {'data': ''}
    t = threading.Thread(target=update_cpu_data, args=(cpu_data_lock, cpu_data))
    t.daemon = True
    t.start()
    while True:
        try:
            for in_data in ins:
                bar_in = in_data['in']
                data = get_data(cpu_data['data'], in_data['monitor']).decode('unicode-escape').encode('utf-8')
                bar_in.write(data)
            time.sleep(.2)
        except Exception as e:
            print e


def start_handle_thread(out):
    def handle_output(out):
        for line in iter(out.readline, b''):
            try:
                cmd = line.split()
                cmd[0] = os.path.expanduser(cmd[0])
                subprocess.call(cmd)
            except:
                pass
        out.close()

    t = threading.Thread(target=handle_output, args=(out,))
    t.daemon = True
    t.start()


def parse_xrandr():
    output = subprocess.check_output(['xrandr'])
    matches = re.findall('(.+) connected (\d+)x(\d+)\+(\d+)\+(\d+)', output)
    return [
        {
            'monitor': match[0],
            'width': int(match[1]),
            'height': int(match[2]),
            'x': int(match[3]),
            'y': int(match[4]),
        }
        for match in matches
    ]


def launch_bar(monitor):
    geometry = "%dx%d+%d+%d" % (
        monitor['width'] - 24,
        48,
        monitor['x'] + 12,
        monitor['y'] + 12,
    )
    conky = subprocess.Popen(
        [
            'conky',
            '-a', 'top_left',
            '-x', str(int(monitor['x'] * 1.01)),
            '-c', os.path.expanduser('~/.config/panel/empty_conky'),
        ]
    )
    time.sleep(.1)
    atexit.register(conky.terminate)
    cmd = [
        'lemonbar',
        '-g', geometry,
        '-f', 'FontAwesome-8',
        '-f', 'Anonymous Pro Minus-8',
        '-B', '#32302f',
        '-F', '#ebdbb2',
        '-p',
        '-d',
    ]
    bar = subprocess.Popen(
        cmd,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
    )
    atexit.register(bar.terminate)
    bar_in = bar.stdin
    bar_out = bar.stdout
    start_handle_thread(bar_out)
    return {
        'monitor': monitor,
        'in': bar_in,
    }


def setup_monitors(monitors):
    main_monitor = None
    for monitor in monitors:
        if monitor['monitor'] != 'eDP1':
            main_monitor = monitor['monitor']
            break
    if main_monitor:
        subprocess.check_call([
            'xrandr',
            "--output", main_monitor, "--auto",
            "--output", "eDP1", "--auto", "--right-of", "DP2"
        ])
    else:
        subprocess.check_call(['xrandr', '--output', 'eDP1', '--auto'])


def main():
    monitors = parse_xrandr()
    setup_monitors(monitors)
    monitors = parse_xrandr()
    subprocess.call(["feh", "--bg-scale", os.path.expanduser("~/background.jpg")])
    ins = map(launch_bar, monitors)
    update_loop(ins, 1.0)


if __name__ == '__main__':
    main()
